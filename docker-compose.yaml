name: easyscraper
services:
  ui:
    image: ui
    build:
      context: ./ui
      args:
        - NEXT_PUBLIC_API_BASE_URL=${API_BASE_URL}
        - NEXT_PUBLIC_GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
        - NEXT_TELEMETRY_DISABLED=1
    ports:
      - 3000:3000
    environment:
      - NEXT_PUBLIC_API_BASE_URL=${API_BASE_URL}
      - NEXT_PUBLIC_GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - NEXT_TELEMETRY_DISABLED=1
    healthcheck:
      test: curl -f http://localhost:3000/api/health
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5
    scale: 1
    depends_on:
      api:
        condition: service_healthy

  api:
    image: api
    build: ./api
    ports:
      - 8000:8000
    environment:
      - DB_URL=${DB_URL}
      - JWT_SECRET=${JWT_SECRET}
      - BROKER_URL=${BROKER_URL}
      - RESULT_BACKEND=${RESULT_BACKEND}
      - BLOB_STORE=${BLOB_STORE}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_DEFAULT_REGION=${S3_DEFAULT_REGION}
      - FS_PATH=${FS_PATH}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TOKEN_EXPIRY_MINUTES=${TOKEN_EXPIRY_MINUTES}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
    healthcheck:
      test: curl -f http://localhost:8000/health
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5
    scale: 1
    depends_on:
      redis:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully
    volumes:
      - blob_store_fs:/blob_store/data

  postgres:
    image: postgres:17-alpine
    hostname: "postgres1"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5

  db-migration:
    image: flyway/flyway
    command: -X -url=${FLYWAY_DB_URL} -schemas=public -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} -connectRetries=60 migrate
    #volumes:
    #  - ./db:/flyway/sql
    volumes:
      - type: bind
        source: ./db
        target: /flyway/sql
        is_directory: true
    depends_on:
      postgres:
        condition: service_healthy
    exclude_from_hc: true

  redis:
    image: redis:7
    ports:
      - 6379:6379
      - 8001:8001
    volumes:
      - redis_volume:/data
    healthcheck:
      test: redis-cli ping
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5

  celery-worker:
    image: api
    build: ./api
    command: uv run celery -A app.celery.celery worker -l INFO -c 4
    environment:
      - DB_URL=${DB_URL}
      - JWT_SECRET=${JWT_SECRET}
      - BROKER_URL=${BROKER_URL}
      - RESULT_BACKEND=${RESULT_BACKEND}
      - BLOB_STORE=${BLOB_STORE}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_DEFAULT_REGION=${S3_DEFAULT_REGION}
      - FS_PATH=${FS_PATH}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - celery_file_data:/app/celery_file_data
      - blob_store_fs:/blob_store/data
    healthcheck:
      test: uv run celery -A app.celery.celery inspect ping
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5
    scale: 1
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_ACCESS_KEY}
      - MINIO_DEFAULT_BUCKETS=${S3_BUCKET}
      - MINIO_ACCESS_KEY=${S3_ACCESS_KEY_ID}
      - MINIO_SECRET_KEY=${S3_SECRET_ACCESS_KEY}
    healthcheck:
      test: curl -f http://localhost:9000/minio/health/live
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5
    profiles:
      - minio

  create-minio-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c " /usr/bin/mc alias set myminio ${S3_ENDPOINT_URL} ${S3_ACCESS_KEY_ID} ${S3_SECRET_ACCESS_KEY}; /usr/bin/mc mb --ignore-existing myminio/${S3_BUCKET}; exit 0; "
    profiles:
      - minio

volumes:
  redis_volume:
  minio_data:
  celery_file_data:
  postgres_volume:
  blob_store_fs:
