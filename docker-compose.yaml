name: easyscraper
services:
  api:
    image: api
    build: ./api
    ports:
      - 8000:8000
    environment:
      - DB_URL=${DB_URL}
      - JWT_SECRET=${JWT_SECRET}
      - BROKER_URL=${BROKER_URL}
      - RESULT_BACKEND=${RESULT_BACKEND}
      - MINIO_URL=${MINIO_URL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_DEFAULT_BUCKET=${MINIO_DEFAULT_BUCKET}
    healthcheck:
      test: curl -f http://localhost:8000/health
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  postgres:
    image: postgres:17
    hostname: "postgres1"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:4-management
    hostname: "rabbit1"
    environment:
      - RABBITMQ_DEFAULT_USER:${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS:${RABBITMQ_PASS}"
    ports:
      - "15672:15672"
      - "5672:5672"
    labels:
      NAME: "rabbitmq1"
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5

  redis:
    image: redis/redis-stack:latest
    ports:
      - 6379:6379
      - 8001:8001
    volumes:
      - redis_volume:/data
    healthcheck:
      test: redis-cli ping
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5

  celery-worker-1:
    image: api
    build: ./api
    command: uv run celery -A app.celery.celery worker -l INFO -c 4
    environment:
      - DB_URL=${DB_URL}
      - JWT_SECRET=${JWT_SECRET}
      - BROKER_URL=${BROKER_URL}
      - RESULT_BACKEND=${RESULT_BACKEND}
      - MINIO_URL=${MINIO_URL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_DEFAULT_BUCKET=${MINIO_DEFAULT_BUCKET}
    volumes:
      - celery_file_data:/app/celery_file_data
    healthcheck:
      test: celery -b ${BROKER_URL} inspect ping
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5
    depends_on:
      rabbitmq:
        condition: service_healthy
  
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=easyscraper
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    healthcheck:
      test: curl -f http://localhost:9000/minio/health/live
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5

  create-minio-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb --ignore-existing myminio/${MINIO_DEFAULT_BUCKET};
      exit 0;
      "

  plantuml:
    image: plantuml/plantuml-server:jetty
    ports:
      - 8080:8080
    environment:
      - BASE_URL=plantuml
    healthcheck:
      test: curl -f http://localhost:8080
      interval: 30s
      start_period: 10s
      timeout: 10s
      retries: 5
    profiles: [plantuml]

volumes:
  redis_volume:
  rabbitmq_volume:
  minio_data:
  celery_file_data:
  postgres_volume: